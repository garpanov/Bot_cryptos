from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.enums.parse_mode import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_select_act, orm_where_select_act, orm_select_train
from kbds.inline import get_inline

router_for_user_private = Router()


@router_for_user_private.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                         reply_markup=get_inline(btns={'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': 'Activities',
                                                       '–û–±—É—á–∞–ª–∫–∞': 'train'}, sizes=(2, 0)))



# ///////////////  inline  ///////////////

@router_for_user_private.callback_query(F.data.startswith("train"))
async def train_starts(callback: types.CallbackQuery, session: AsyncSession):
    result = ''
    for termin in await orm_select_train(session= session):
        result += f'üìö<b>{termin.name}</b> - <i>{termin.description}</i>\n\n'

    await callback.answer()
    await callback.message.answer(result, parse_mode=ParseMode.HTML,
                                  reply_markup=get_inline(btns={"–ê—Å—Ç–∏–≤–Ω–æ—Å—Ç–∏": 'Activities'}, sizes=(1,0)))

@router_for_user_private.callback_query(F.data.startswith("Activities"))
async def Activities_starts(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã.',
                                  reply_markup=get_inline(btns={"–¢–∞–ø–∞–ª–∫–∏": 'act_tap',
                                                                '–¢–µ—Å—Ç–Ω–µ—Ç—ã': 'act_test'}, sizes=(2,0)))


@router_for_user_private.callback_query(F.data.startswith("act"))
async def Activities_testn_tapal(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    if product_id == "tap":
        type = '–¢–∞–ø–∞–ª–∫–∏'
        inline_key = '–¢–µ—Å—Ç–Ω–µ—Ç—ã'
        inline_meaning = 'act_test'
    else:
        type = '–¢–µ—Å—Ç–Ω–µ—Ç—ã'
        inline_key = '–¢–∞–ø–∞–ª–∫–∏'
        inline_meaning = 'act_tap'
    projects = f'<b>{type}</b>\n'
    for project in await orm_where_select_act(session=session, types=type):
        projects += (f'<b>Name ‚Äî </b><i>{project.name}</i>\n  '
                     f'<b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ‚Äî </b><i>{project.description}</i>\n  '
                     f'<b>–ü–æ—Å—Ç ‚Äî </b><a href="{project.link}">*–¢–ò–¶–¨*</a>\n  '
                     f'<b>–ü–æ—Å—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω </b><i>{project.date}</i>\n\n')
    await callback.answer()
    await callback.message.answer(projects, parse_mode=ParseMode.HTML, reply_markup=get_inline(
                                                                        btns={inline_key: inline_meaning,
                                                                              '–û–±—É—á–∞–ª–∫–∞': 'train'}, sizes=(2,0)))
